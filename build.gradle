import java.nio.charset.StandardCharsets

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'edu.sc.seis.gradle:launch4j:2.4.4'
    }
}
plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id 'edu.sc.seis.launch4j' version '2.4.4'
    id "de.fuerstenau.buildconfig" version "1.1.8"
    id 'com.palantir.git-version' version '0.11.0'
}
apply plugin: 'idea'
configurations {
    ktlint
}

group 'com.nstda.hii.airsynclauncher'
version gitVersion()
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    jcenter()
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.30.0"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    compile 'com.github.lionants02:CheckDuplicate:0.0.4'
    compile 'com.github.lionants02:check46BitSupport:0.0.1'
    compile 'com.github.lionants02:EasyPrintLogGUI:0.0.2'
    compile 'com.github.lionants02:ZIpDownload:0.0.1'
    compile 'com.github.lionants02:GitHubLatestApi:0.0.1'
    compile 'com.github.lionants02:WindowsCreateLink:0.0.2'
    compile 'com.github.lionants02:JvmIsAdmin:0.0.1'

    testImplementation "org.amshove.kluent:kluent:1.34"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

launch4j {
    headerType = 'gui'
    mainClassName = 'launcher.MainKt'
    productName = 'FFC AirSync Client'
    manifest = "$projectDir/launch4j.manifest"
    outfile = "ffc-airsync.exe"
    icon = "$projectDir/logo.ico"
    // splashFileName = "$projectDir/splash.bmp"
    jreRuntimeBits = '64/32'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    destinationDir = file("$buildDir/bin")

    manifest { attributes "Main-Class": "launcher.MainKt" }

    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/LICENSE*'
    exclude 'about.html'
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

task buildByVersion() {
    def orgMain = "$projectDir/src/main/kotlin/launcher/Main.kt"
    def newMain = "$projectDir/src/main/kotlin/launcher/Main.kt.new"

    doLast {
        def file = file(orgMain)
        def data = file.readLines()
        def fstream = new OutputStreamWriter(new FileOutputStream(newMain), StandardCharsets.UTF_8)
        println(data.size())
        data.each {
            if (it.contains("val VERSION")) {
                fstream.println("private const val VERSION = \"$VERSION\"")
            } else {
                fstream.println(it)
            }
        }
        fstream.close()

        delete orgMain
        ant.move file: newMain,
                tofile: orgMain
    }
}
